#include <Shaders/shaders.inc>

// Entry Point
//============

#if defined( EAE6320_PLATFORM_D3D )

void main(

    // Input
    //======

    // The "semantics" (the keywords in all caps after the colon) are arbitrary,
    // but must match the C call to CreateInputLayout()

    // These values come from one of the VertexFormats::sMesh that the vertex buffer was filled with in C code
    in const float3 i_position : POSITION,
    in const float2 i_uv : TEXCOORD0,
    in const float4 i_color : COLOR0,

    // Output
    //=======

    // An SV_POSITION value must always be output from every vertex shader
    // so that the GPU can figure out which fragments need to be shaded
    out float4 o_position : SV_POSITION,
    out float2 o_uv : TEXCOORD0,
    out float4 o_color : COLOR0

    )

#elif defined( EAE6320_PLATFORM_GL )

// Input
//======

// The locations assigned are arbitrary
// but must match the C calls to glVertexAttribPointer()

// These values come from one of the VertexFormats::sMesh that the vertex buffer was filled with in C code
layout( location = 0 ) in vec3 i_position;
layout( location = 1 ) in vec2 i_uv;
layout( location = 2 ) in vec4 i_color;

// Output
//=======

// The vertex shader must always output a position value,
// but unlike HLSL where the value is explicit
// GLSL has an automatically-required variable named "gl_Position"
#define o_position gl_Position
layout( location = 0 ) out vec2 o_uv;
layout( location = 1 ) out vec4 o_color;

// Entry Point
//============

void main()

#endif

{
    // Calculate the position of this vertex on screen
    {
        float4 vertexPosition_local = float4( i_position, 1.0 );
        // Transform the vertex from local space to world space
        float4 vertexPosition_world = Mul( g_transform_localToWorld, vertexPosition_local );
        // Transform the vertex from world space to camera space
        float4 vertexPosition_camera = Mul( g_transform_worldToCamera, vertexPosition_world );
        // Transform the vertex from camera space to projected space
        float4 vertexPosition_projected = Mul( g_transform_cameraToProjected, vertexPosition_camera );

        // Output the final projected position
        o_position = vertexPosition_projected;

        // Pass the UVs that were inputs.
        o_uv = i_uv;

        // Pass the colors that were inputs
        o_color = i_color;
    }
}
